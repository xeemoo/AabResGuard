apply plugin: 'maven-publish'

tasks.register('sourcesJar', Jar) {
    dependsOn classes
    from sourceSets.main.java.srcDirs
    archiveClassifier.set('sources')
    archiveVersion = versions[ARTIFACT_ID]
}

tasks.register('javadocJar', Jar) {
    dependsOn javadoc
    from javadoc.destinationDir
    archiveClassifier.set('javadoc')
    archiveVersion = versions[ARTIFACT_ID]
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

def releasesRepoUrl = System.getProperty("RELEASE_REPOSITORY_URL")
def snapshotsRepoUrl = System.getProperty("SNAPSHOT_REPOSITORY_URL")
def publishUrl = versions[ARTIFACT_ID].endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
def publishUserName = System.getProperty("NEXUS_USERNAME")
def publishPassword = System.getProperty("NEXUS_PASSWORD")

println "-------publish info---------"
println "url: $publishUrl"
println "username: $publishUserName"
println "password: $publishPassword"

publishing {
    if (!System.getProperty("uploadToBintray", "false").equalsIgnoreCase("true")) {
        repositories {
            maven {
                url = publishUrl
                credentials {
                    username = publishUserName
                    password = publishPassword
                }
            }
            if (System.getProperty("useLocalMaven", "false").equalsIgnoreCase("true")) {
                maven {
                    url = "${rootProject.projectDir}/repo"
                }
            }
        }
    }

    if (project.plugins.hasPlugin("java-library") || project.plugins.hasPlugin("java")) {
        publications {
            MyPublication(MavenPublication) {
                from components.java
                artifact sourcesJar
                artifact javadocJar

                groupId GROUP_ID
                artifactId ARTIFACT_ID
                version versions[ARTIFACT_ID]
            }
        }
    } else {
        throw new GradleScriptException("java-library plugin required")
    }
}

apply from: "$rootDir/gradle/publish-bintray.gradle"